generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "linux-musl"]
  previewFeatures = ["interactiveTransactions"]
  output          = "../prisma-client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Movie enums
enum MovieType {
  ANIMATED_SERIES // Мульт-сериал
  ANIME // Аниме
  CARTOON // Мультфильм
  MINI_SERIES // Мини-сериал
  MOVIE // Фильм
  TV_SERIES // Сериал
  TV_SHOW // ТВ-Шоу
  VIDEO // Видео
}

enum MovieStatus {
  FILMING
  PRE_PRODUCTION
  COMPLETED
  ANNOUNCED
  UNKNOWN
  POST_PRODUCTION
}

// Person enums
enum ProfessionType {
  ACTOR // Актер
  NOT_LISTED_IN_THE_CREDITS // В титрах не указаны
  BAND_CHRONICLE // Группа: Хроника
  BAND_PLAYING_THEMSELVES // Группа: играют самих себя
  DIRECTOR // Режиссер
  COMPOSER // Композитор
  EDITOR // Монтажер
  VOICE_DIRECTOR // Звукорежиссер
  OPERATOR // Оператор
  TRANSLATOR // Переводчик
  PRODUCER // Продюсер
  WRITER // Сценарист
  PRODUCTION_DESIGNER // Художник-постановщик
  PRODUCER_USSR // Продюссер СССР
}

enum DivorcedReason {
  ANNULLED // Аннулирован
  DIVORCE // Развод
  DIED // Смерть
}

enum PersonRelation {
  HUSBAND // Супруг
  WIFE // Супруга
}

enum PersonSex {
  Male // Мужской
  Female // Женский
}

// Image enums
enum ImageType {
  BACKDROP
  POSTER
  FRAME
  LOGO
  STILL
  SHOOTING
  SCREENSHOT
}

// Video enums
enum VideoType {
  TRAILER
  TEASER
}

enum VideoSource {
  YOUTUBE
  YANDEX
}

// Movie types
type CollectionsImage {
  url String?
}

type MovieBackdrop {
  previewUrl String?
  url        String?
}

type MovieLogo {
  url String?
}

type MovieBudget {
  currency String?
  value    String
}

type MovieNameItem {
  name String
}

type MovieDistributors {
  distributor        String?
  distributorRelease String?
}

type MovieExternalId {
  imdb String?
  tmdb Int?
  kpHD String?
}

type MovieFees {
  usa    MovieFeesItem?
  world  MovieFeesItem?
  russia MovieFeesItem?
}

type MovieFeesItem {
  currency String
  value    Int
}

type MoviePremiere {
  country String?
  bluray  DateTime? @db.Date
  cinema  DateTime? @db.Date
  digital DateTime? @db.Date
  dvd     DateTime? @db.Date
  russia  DateTime? @db.Date
  world   DateTime? @db.Date
}

type MovieRating {
  kp                 Float
  imdb               Float
  await              Float?
  filmCritics        Float?
  russianFilmCritics Float?
  tmdb               Float?
}

type MovieTechnology {
  has3D   Boolean
  hasImax Boolean
}

type MovieVotes {
  await              Int?
  filmCritics        Int?
  imdb               Int
  kp                 Int
  russianFilmCritics Int?
  tmdb               Int?
}

type MovieWatchability {
  items MovieWatchabilityItems[]
}

type MovieWatchabilityItems {
  logo MovieLogo
  name String
  url  String
}

type MovieReleaseYears {
  start Int
  end   Int?
}

// Person types
type PersonSpouses {
  children       Int
  divorced       Boolean
  divorcedReason DivorcedReason
  name           String
  relation       PersonRelation
  sex            PersonSex?
}

// Season types
type SeasonEpisode {
  date        DateTime?
  description String?
  enName      String?
  name        String?
  number      Int
}

model Video {
  id      String      @id @default(auto()) @map("_id") @db.ObjectId
  kpId    Int
  // String properties
  name    String
  url     String      @unique()
  // Int properties
  size    Int?
  // Enum properties
  source  VideoSource
  type    VideoType?
  // Relations
  movie   Movie       @relation(fields: [movieId], references: [id])
  movieId String      @db.ObjectId
}

model Image {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  movieKpId  Int
  // String properties
  url        String    @unique()
  language   String?
  previewUrl String
  // Int properties
  kpMovieId  Int
  height     Int?
  width      Int?
  // Enum properties
  type       ImageType
  // Date proprties
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  // Relations
  movie      Movie     @relation(fields: [movieId], references: [id])
  movieId    String    @unique @db.ObjectId
}

model Season {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  movieKpId     Int
  // Int properties
  episodesCount Int
  number        Int
  // Type properties
  episodes      SeasonEpisode[]
  // Date proprties
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  // Relations
  movie         Movie           @relation(fields: [movieId], references: [id])
  movieId       String          @db.ObjectId
}

model Review {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  kpMovieId      Int
  // String properties
  author         String
  review         String
  title          String?
  // Int properties
  reviewDislikes Int
  reviewLikes    Int
  userRating     Int
  // Date proprties
  date           DateTime @db.Date
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  // Relations
  movie          Movie    @relation(fields: [movieId], references: [id])
  movieId        String   @db.ObjectId
}

model Person {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  kpId        Int              @unique
  // String properties
  enName      String?
  name        String?
  photo       String
  sex         PersonSex?
  birthPlace  String[]
  deathPlace  String[]
  // Int properties
  age         Int?
  countAwards Int?
  growth      Int?
  // Enum properties
  profession  ProfessionType[]
  // Type properties
  spouses     PersonSpouses[]
  // Date proprties
  birthday    DateTime?        @db.Date
  death       DateTime?        @db.Date
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  // Relations
  movies      MovieOnPerson[]
  facts       PersonFact[]
}

model MovieOnPerson {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  kpId        Int              @unique
  kpMovieId   Int
  // String properties
  description String
  // Enum properties
  profession  ProfessionType[]
  // Date proprties
  assignedAt  DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  // Relations
  movie       Movie            @relation(fields: [movieId], references: [id])
  movieId     String           @db.ObjectId
  person      Person           @relation(fields: [personId], references: [id])
  personId    String           @db.ObjectId
}

model PersonFact {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  personKpId Int
  value      String
  // Date proprties
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  // Relations
  personId   String   @db.ObjectId
  person     Person   @relation(fields: [personId], references: [id])
}

model MovieFact {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  movieKpId Int
  spoiler   Boolean?
  type      String?
  value     String
  // Date proprties
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Relations
  movie     Movie    @relation(fields: [movieId], references: [id])
  movieId   String   @db.ObjectId
}

model Movie {
  // Id properties
  id                            String              @id @default(auto()) @map("_id") @db.ObjectId
  kpId                          Int                 @unique
  externalId                    MovieExternalId
  // String properties
  name                          String?
  names                         String[]
  enName                        String?
  alternativeName               String?
  description                   String?
  ratingMpaa                    String?
  shortDescription              String?
  slogan                        String?
  //Int properties
  year                          Int?
  movieLength                   Int?
  ageRating                     Int?
  top10                         Int?
  top250                        Int?
  // Enum properties
  type                          MovieType?
  status                        MovieStatus?
  genres                        MovieNameItem[]
  countries                     MovieNameItem[]
  // Type properties
  rating                        MovieRating
  budget                        MovieBudget?
  distributors                  MovieDistributors?
  votes                         MovieVotes
  fees                          MovieFees?
  premiere                      MoviePremiere?
  technology                    MovieTechnology?
  watchability                  MovieWatchability?
  releaseYears                  MovieReleaseYears[]
  // Date proprties
  createdAt                     DateTime            @default(now())
  updatedAt                     DateTime            @updatedAt
  // Relations
  movieId                       String              @db.ObjectId()
  images                        Image[]
  videos                        Video[]
  seasons                       Season[]
  persons                       MovieOnPerson[]
  facts                         MovieFact[]
  review                        Review[]
  // Sequels and prequels
  movieHavingSequelsAndPrequels Movie               @relation("SequelsAndPrequels", fields: [movieId], references: [id], onUpdate: NoAction)
  sequelsAndPrequels            Movie[]             @relation("SequelsAndPrequels")
  // Similar movies
  movieHavingSimilar            Movie               @relation("SimilarMovies", fields: [movieId], references: [id], onUpdate: NoAction)
  similarMovies                 Movie[]             @relation("SimilarMovies")
}